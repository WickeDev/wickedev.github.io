{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/번역-Didact-DOM-요소Elements-렌더링하기","result":{"pageContext":{"html":"<p><a href=\"https://velog.io/@wickedev/%EB%B2%88%EC%97%AD-Didact-%EC%9E%90%EC%8B%A0%EB%A7%8C%EC%9D%98-%EB%A6%AC%EC%95%A1%ED%8A%B8%EB%A5%BC-%EB%A7%8C%EB%93%9C%EB%8A%94-DIY-%EA%B0%80%EC%9D%B4%EB%93%9C\">이 이야기는 단계별 리액트 DIY 시리즈의 일부입니다.</a></p>\n<h3>DOM 리뷰</h3>\n<p>시작하기 전에, 사용할 DOM API를 살펴봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Get an element by id</span>\n<span class=\"token keyword\">const</span> domRoot <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create a new element given a tag name</span>\n<span class=\"token keyword\">const</span> domInput <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set properties</span>\ndomInput<span class=\"token punctuation\">[</span><span class=\"token string\">\"type\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">;</span>\ndomInput<span class=\"token punctuation\">[</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Hi world\"</span><span class=\"token punctuation\">;</span>\ndomInput<span class=\"token punctuation\">[</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"my-class\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Listen to events</span>\ndomInput<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"change\"</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">e</span> <span class=\"token operator\">=></span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Create a text node</span>\n<span class=\"token keyword\">const</span> domText <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Set text node content</span>\ndomText<span class=\"token punctuation\">[</span><span class=\"token string\">\"nodeValue\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Append an element</span>\ndomRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>domInput<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Append a text node (same as previous)</span>\ndomRoot<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>domText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/1cd4571481cbc9c3bbad560a764bb982#file-dom-js\">gist</a>, <a href=\"https://codepen.io/pomber/pen/aWBLJR\">codepen</a></p>\n<p><a href=\"https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html\">속성(attributes) 대신 엘리먼트 속성(element properties)을 설정</a>한다는 점에 유의하세요. 즉 유효한 속성(properties)만 허용된다는 의미입니다.</p>\n<h3>Didact 엘리먼트들</h3>\n<p>랜더링 할 필요가 있는 것이 무엇인지 설명하기 위해 일반 JS 오브젝트를 사용할 것 입니다. 그것을 Didact 엘리먼트들이라 부를 것 입니다. 이 엘리먼트는 <code class=\"language-text\">type</code> 과 <code class=\"language-text\">props</code>, 두 개의 필수 속성(properties)을 가집니다. <code class=\"language-text\">type</code>은 문자열이거나 함수가 될 수 있지만, 추후 포스트에서 컴포넌트를 소개하기 전까지는 문자열 만을 사용할 겁니다. <code class=\"language-text\">props</code>는 비어있을 수 있지만 null은 아닌 오브젝트입니다. <code class=\"language-text\">props</code>는 Didact 엘리먼트들의 배열이 될 수 있는 <code class=\"language-text\">children</code> 속성(property)을 가질 수 있습니다.</p>\n<blockquote>\n<p><em>Didact 엘리먼트를 많이 사용하게 될 것이므로, 지금부터는 줄여서 엘리먼트라 부를 것 입니다. HTML 엘리먼트와 혼동하지 않도록, 이것들은 DOM 엘리먼트, 혹은 변수 이름을 지을 때 그냥 <code class=\"language-text\">dom</code> 엘리먼트라 하도록 하죠. (preact가 그랬듯이)</em></p>\n</blockquote>\n<p>예를 들어, 아래는 엘리먼트 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"div\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token string\">\"container\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"input\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token string\">\"foo\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"text\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">href</span><span class=\"token operator\">:</span> <span class=\"token string\">\"/bar\"</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/4d4e9490a9bc79b3666029c8d573139e#file-element-js\">gist</a></p>\n<p>아래는 DOM 엘리먼트입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"container\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>input value<span class=\"token operator\">=</span><span class=\"token string\">\"foo\"</span> type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>a href<span class=\"token operator\">=</span><span class=\"token string\">\"/bar\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>a<span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/4bc909aa07abfab357f5775bc525168a#file-element-html\">gist</a></p>\n<p>Didact 엘리먼트들은 리액트 엘리먼트와 매우 유사합니다. 하지만 일반적으로 여러분이 리액트를 사용할 때, 리액트 엘리먼트를 JS 객체로 만들지는 않을 겁니다. 아마도 여러분은 JSX 혹은 <code class=\"language-text\">createElement</code>를 사용하겠죠. Didact에서도 동일하지만, 다음 시리즈의 포스트를 위해 엘리먼트 생성 코드는 남겨두도록 하죠.</p>\n<h3>DOM 엘리먼트 랜더링</h3>\n<p>다음 단계는 엘리먼트와 그 자식을 dom에 랜더링하는 것 입니다. 우리는 하나의 엘리먼트와 dom 컨테이너를 받는 <code class=\"language-text\">render</code> 함수(<code class=\"language-text\">ReactDOM.render</code> 와 동일한)를 사용합니다. 이 함수는 엘리먼트에 정의된 대로 DOM 하위 트리를 만들어 컨테이너에 추가할 것 입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parentDom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  parentDom<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/1ceaa171a8c7702ab01e8b8c9b604012#file-render-js\">gist</a></p>\n<p>여전히 속성(properties)과 이벤트 리스너가 없습니다. 그럼 props 속성 이름들을 <code class=\"language-text\">Object.keys</code> 함수로 반복하여 적절히 설정해 보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parentDom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAttribute</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isListener</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"children\"</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  parentDom<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/57230d30dd86176b90cf39eabfc79192#file-render-js\">gist</a></p>\n<h3>DOM 텍스트 노드 랜더링</h3>\n<p>render 함수가 아직 지원하지 않는 한가지는 텍스트 노드입니다. 먼저 텍스트 엘리먼트의 모양을 정의해야 합니다, 예를 들어, <span>Foo</span> 엘리먼트는 리액트에서 아래와 같이 작성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> reactElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Foo\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/7febeae1067e68629e48ce984b7479a5#file-react-text-element-js\">gist</a></p>\n<p>자식은 다른 엘리먼트 객체가 아니라 단순히 문자열이라는 점에 유의하세요. 이는 우리가 정의한 Didact 엘리먼트들(:children)에 위배되니, 엘리먼트들의 배열과 모든 엘리먼트는 <code class=\"language-text\">type</code>과 <code class=\"language-text\">props</code>를 가져야합니다. 이러한 규칙을 따른다면, 추후에 조건 문(<code class=\"language-text\">if</code>)을 적게 사용할 수 있을 것 입니다. 따라서 아래와 Didact 텍스트 엘리먼트의 <code class=\"language-text\">type</code>은 <code class=\"language-text\">\"TEXT ELEMENT\"</code>고, 실제 텍스트는 <code class=\"language-text\">nodeValue</code> 속성에 포함합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> textElement <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"span\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">children</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n      <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">\"TEXT ELEMENT\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token literal-property property\">props</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">nodeValue</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Foo\"</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/1952cc24b8dd70c3e3f8a06a4000f72f#file-didact-text-element-js\">gist</a></p>\n<p>텍스트 엘리먼트가 어떻게 렌더링 되는지 정의했습니다. 다른 엘리먼트와의 차이점은 텍스트 엘리먼트는 <code class=\"language-text\">createElement</code>를 사용하는 대신 <code class=\"language-text\">createTextNode</code>를 사용해야한다는 것입니다. 즉, <code class=\"language-text\">nodeValue</code>는 다른 속성들(properties)과 같은 방식으로 설정됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> parentDom</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">,</span> props <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> element<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Create DOM element</span>\n  <span class=\"token keyword\">const</span> isTextElement <span class=\"token operator\">=</span> type <span class=\"token operator\">===</span> <span class=\"token string\">\"TEXT ELEMENT\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> dom <span class=\"token operator\">=</span> isTextElement\n    <span class=\"token operator\">?</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">:</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Add event listeners</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isListener</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> name<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"on\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isListener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> eventType <span class=\"token operator\">=</span> name<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    dom<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span>eventType<span class=\"token punctuation\">,</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Set properties</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isAttribute</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token operator\">!</span><span class=\"token function\">isListener</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> name <span class=\"token operator\">!=</span> <span class=\"token string\">\"children\"</span><span class=\"token punctuation\">;</span>\n  Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>isAttribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    dom<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> props<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Render children</span>\n  <span class=\"token keyword\">const</span> childElements <span class=\"token operator\">=</span> props<span class=\"token punctuation\">.</span>children <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  childElements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">childElement</span> <span class=\"token operator\">=></span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>childElement<span class=\"token punctuation\">,</span> dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Append to parent</span>\n  parentDom<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>dom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"https://gist.github.com/pomber/b7cd21f45709482b5728b7540f0e98ed#file-render-js\">gist</a></p>\n<h3>요약</h3>\n<p>엘리먼트를 DOM에 자식으로 렌더링 할 수 있게 해주는 <code class=\"language-text\">render</code> 함수를 만들었습니다. 다음으로 필요한 것은 엘리먼트를 만드는 쉬운 방법입니다. 다음 포스팅에서는 JSX를 Didact와 함께 사용할 수 있도록 만들어보겠습니다.</p>\n<p>지금까지 작성한 코드를 돌려보길 원하면 <a href=\"https://codepen.io/pomber/pen/eWbwBq?editors=0010\">codepen</a>을 확인하거나, <a href=\"https://github.com/hexacta/didact/commit/fc4d360d91a1e68f0442d39dbce5b9cca5a08f24\">github 레포에서 차이점</a>을 확인할 수도 있습니다</p>\n<p>다음 포스트: <a href=\"https://engineering.hexacta.com/didact-element-creation-and-jsx-d05171c55c56\">엘리먼트 생성과 JSX</a></p>\n<p>읽어 주셔서 감사합니다.</p>\n<hr>\n<p>저는 <a href=\"https://www.hexacta.com/?hil\">Hexacta</a>에서 여러가지를 만들고있습니다.\n아이디어가 있거나 저희를 도울 수 있다면 <a href=\"https://www.hexacta.com/contact/?hil\">연락</a>주세요.</p>\n<hr>\n<p><a href=\"https://engineering.hexacta.com/didact-learning-how-react-works-by-building-it-from-scratch-51007984e5c5\">출처</a>, <a href=\"https://github.com/pomber/didact\">소스코드</a></p>","title":"[번역] Didact: DOM 엘리먼트 렌더링하기"}},"staticQueryHashes":[]}
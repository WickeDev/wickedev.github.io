{"componentChunkName":"component---src-templates-post-template-tsx","path":"/blog/Gitlab-CICD-튜토리얼-bljzphditt","result":{"pageContext":{"html":"<p>깃랩(Gitlab)은 온프레미스 설치형 깃 호스팅으로 유명하고, 깃헙처럼 <a href=\"https://gitlab.com\">웹서비스</a> 형태로도 사용이 가능합니다. 다만 깃헙이 선점 효과를 톡톡히 누리고 있는지라 만년 2인자 자리를 지키고 있죠. 깃랩의 장점이라면 CI/CD가 잘되어 있습니다. 심지어 설치형이 아니라도 public 레포인 경우 무료, private 레포인 경우 그룹 당 월 2000분(약 33.3시간)까지 무료입니다. 유료 플랜까지 가게되면 깃랩 안에서 모든걸 다 처리하라고 왠만한 솔루션 뺨치는 쿠버네티스 관리 보드까지 달아줍니다.</p>\n<p>최근 깃헙도 이에 질세라 깃헙 액션을 베타로 공개했지만, 아직까지는 Circle CI, Travis CI 같은 외부 서비스를 사용하는게 일반적이죠</p>\n<p>큰 그림을 보자면 깃랩의 CI/CD는 도커에서 돌아갑니다. 그리고 연결된 쿠버네티스에 배포됩니다. 프로젝트 루트에 .gitlab-ci.yml이 있는 상태로 새로운 푸시가 들어오면 일련의 파이프라인(Job 묶음)이 실행됩니다. 각 Job은 개발자의 선택에 달렸지만 보통은 아래와 같습니다.</p>\n<ul>\n<li>테스트: 유닛 테스트, 통합 테스트, E2E 테스트, 테스트 커버리지 측정</li>\n<li>린트: 코드 퀄리티 측정, 코드 컨벤션 점검</li>\n<li>빌드: 빌드, 번들링, Dockerfile 빌드 및 컨테이너 레지스트리 푸시</li>\n<li>배포: Helm Chart, KNative Functions, KNative App(컨테이너) 배포</li>\n</ul>\n<h2>사전 지식</h2>\n<ul>\n<li>git</li>\n<li>node (javascript)</li>\n<li>docker</li>\n<li>kubernetes</li>\n</ul>\n<h2>준비물</h2>\n<ul>\n<li>개인 도메인 (istio-ingressgateway 혹은 nginx-ingress 를 사용하기 위한)</li>\n<li>깃랩 온프레미스 혹은 <a href=\"https://gitlab.com\">gitlab.com</a> 계정</li>\n<li>온프레미스일 경우 Gitlab Container Registry 활성화</li>\n<li>온프레미스일 경우 Shared Runner 활성화 (Kubernetes를 통해 Specific Runner를 활성화 할수 있기 때문에 필수는 아님)</li>\n<li>온프레미스 Kubernetes 혹은 <a href=\"https://cloud.google.com\">GCP</a> 결제가 활성화된 구글 계정\n<ul>\n<li>만약 Kubernetes를 직접 리눅스 서버에 설치하실 경우 <a href=\"http://k3s.io\">k3s</a>를 사용하시면 편리합니다. 다만 traefik이 포함되어 있으므로 깃랩의 Ingress 혹은 KNative(istio 포함) 연동을 할때 포트가 충돌하니 traefik 관련을 삭제해주어야 합니다.</li>\n</ul>\n</li>\n</ul>\n<h2>사전 준비</h2>\n<p>저는 이 튜토리얼에서 온프레미스가 아닌 <a href=\"https://gitlab.com\">gitlab.com</a> 을 사용합니다. 프로젝트 이름은 CI-CD-Tutorial로 지어줬습니다. 그리고 Create project를 눌러줍니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/8e567ca0-c665-11e9-be75-25da91e46b44/image.png\" alt=\"image.png\"></p>\n<p>그 다음 <code class=\"language-text\">Operations > Kubernetes > Add Kubernetes cluster</code> 에 들어가 GKE(Google Kubernetes Engine)를 연동합니다. GKE 연동을 하려면 구글 클라우드 결제(비용이 발생)가 활성화 되어 있어야하고, Kubernetes Engine 및 Compute Engine API를 활성화 시켜야합니다.</p>\n<ul>\n<li>GKE 연동시 가장 가까운 리전은 asia-northeast1이고, 권장 사양은 n1-standard-2 x 3대입니다. 약 월 20만원이지만 상단의 Apply for credit을 요청하면 2~300$ 크레딧을 제공합니다</li>\n</ul>\n<p>비용이 걱정된다면 남는 리눅스 서버에 Kubernetes 를 설치한 뒤 Add existing cluster 에서 연동할 수도 있습니다. <a href=\"https://medium.com/better-programming/using-a-k3s-kubernetes-cluster-for-your-gitlab-project-b0b035c291a9\">Using a k3s Kubernetes Cluster for Your GitLab Project</a> 포스팅을 참조하여 연동하시면 됩니다. 다만 traefik 관련은 Ingress, KNative 연동시에 충돌이 나게되니 삭제합니다</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/1b27ae60-c666-11e9-be75-25da91e46b44/image.png\" alt=\"image.png\"></p>\n<p>연동 후 잠시 기다리면 아래와 같은 화면이 나옵니다. Base domain 에는 배포에 사용할 도메인(저는 제 도메인을 적었습니다)을 적고 Save changes를 눌러줍니다. 그 다음 Helm Tiller Install 을 눌러 설치합니다. Helm은 쿠버네티스 어플리케이션 메니저로써 클라이언트인 Helm, 서버인 Tiller(쿠버네티스에 설치되는) 로 구성되며, 구성을 정의한 Chart를 통해 쿠버네티스에 복잡한 구성의 서비스를 배포할 수 있습니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/4c289fe0-c668-11e9-be75-25da91e46b44/image.png\" alt=\"image.png\"></p>\n<p>그 다음 필요에 따라 Prometheus, Cert-Manager 를 설치합니다. (몇몇 솔루션은 직접 설치했을 경우 PV(Persistent Volumes)가 필요하니 storageclass를 설정해 두는게 좋습니다) 만약 온프레미스 환경에서 Runner를 추가하지 않았다면, GitLab Runner 도 설치합니다,</p>\n<p>그 다음이 중요한 부분인데, 2가지 선택지가 있습니다.</p>\n<ul>\n<li>Auto DevOps:\n<ul>\n<li>.gitlab-ci.yaml을 작성하지 않더라도 임의의 파이프 라인을 구성하여 배포</li>\n<li>빌드, 코드 퀄리티, 테스트, 배포시 롤아웃, 퍼포먼스 테스트까지 구성</li>\n<li>Helm Chart를 수정하여 배포되는데 기본으로 PostgresQL이 딸려옴</li>\n<li>커스터마이즈의 어려움</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/wickedev/bf45be10-c66b-11e9-9bf5-35fb46f3128d/image.png\" alt=\"image.png\"></p>\n<ul>\n<li>KNative:\n<ul>\n<li>직접 .gitlab-ci.yaml을 작성함</li>\n<li>Pivotal에서 개발한 kubernetes + istio 기반 서버리스 배포 환경</li>\n<li>스테이징 환경 (실제 배포가 아닌 내부 배포) 구성에 용이함</li>\n<li>KNative는 <a href=\"https://github.com/triggermesh/tm\">tm</a>을 통해 배포되며, 현재 깃랩 버전에서는 subdomain을 지정할 수 없음\n<ul>\n<li>ci.ci-13952126-development.codesanctum.net 이런식</li>\n</ul>\n</li>\n<li>커스터마이즈가 쉬움</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://images.velog.io/post-images/wickedev/dd5c12f0-c66b-11e9-8ab7-c9e1be8adce2/image.png\" alt=\"image.png\"></p>\n<p>만약 Auto DevOps를 사용하시려면 Ingress를 설치하시고, KNative를 사용하시려면 istio를 설치합니다. 왜냐하면 KNative가 istio를 사용하는데, Ingress는 nginx를 사용하기 때문에 포트가 쫑이납니다. istio-ingressgateway가 깔리느냐 nginx-ingress-controller가 깔리느냐 차이입니다. (물론 GKE를 쓰신다면 둘다 설치해도 퍼블릭 IP를 할당해주니 둘다 설치하셔도 됩니다)</p>\n<p>어찌됐건 복잡한 배포를 하려면 yaml을 직접 작성해야하니, 뭘 선택하던 위에 두 방법은 못쓰므로 부담 없이 깔아줍시다. 저는 스테이징 환경 구성에 용이한 KNative를 선택하였습니다. 설치 후 잠시 기다리면 아래와 같이 보여지는데, Knative Endpoint를 와일드 카드 도메인의 A 레코드에 연결하고 Save changes 누르시면 됩니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/fa7a2fb0-c66c-11e9-90c7-471fa107ee07/image.png\" alt=\"image.png\"></p>\n<p>다음은 배포시 사용할 Gitlab Container Registry를 위해 <code class=\"language-text\">Settings > Repository > Deploy Tokens</code> 에 가서 아래와 같이 입력하고 Create deploy token을 눌러줍니다. 그리고 생성된 토큰과 패스워드는 따로 적어둡니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/af328790-c66d-11e9-8ab7-c9e1be8adce2/image.png\" alt=\"image.png\"></p>\n<p>생성된 토큰과 패스워드는 <code class=\"language-text\">Settings > CI/CD > Variables</code> 에 <code class=\"language-text\">CI_DEPLOY_USER</code>, <code class=\"language-text\">CI_DEPLOY_PASSWORD</code> 라는 키값으로 입력후 저장해주시면 됩니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/1b25b8f0-c66e-11e9-be75-25da91e46b44/image.png\" alt=\"image.png\"></p>\n<p>이제 준비는 끝났습니다.</p>\n<h2>프로젝트 작성</h2>\n<p>저는 express node 서버를 작성하여, .gitlab-ci.yaml를 통해 CI/CD를 수행하여 Dockerfile을 통해 이미지를 빌드한 뒤 KNative serverless app(컨테이너)을 통해 배포할겁니다. 작성할 파일은 <code class=\"language-text\">.gitignore</code>, <code class=\"language-text\">.gitlab-ci.yml</code>, <code class=\"language-text\">Dockerfile</code>, <code class=\"language-text\">index.js</code>, <code class=\"language-text\">package.json</code> 이렇게 5개 입니다. 적당히 프로젝트를 clone 하여 아래와 같이 작성후 push 합니다.</p>\n<p>KNative는 서비스 노출에 8080 포트(Auto DevOps 의 경우 5000)를 사용합니다.</p>\n<p>.gitignore</p>\n<div class=\"gatsby-highlight\" data-language=\".gitignore\"><pre class=\"language-.gitignore\"><code class=\"language-.gitignore\">.DS_Store\nnode_modules</code></pre></div>\n<p>.gitlab-ci.yml</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> node<span class=\"token punctuation\">:</span>latest\n\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> test\n  <span class=\"token punctuation\">-</span> build\n  <span class=\"token punctuation\">-</span> deploy\n\n<span class=\"token key atrule\">cache</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">paths</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> node_modules/\n\n<span class=\"token key atrule\">include</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span> Serverless.gitlab<span class=\"token punctuation\">-</span>ci.yml\n\n<span class=\"token key atrule\">test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> npm install\n    <span class=\"token punctuation\">-</span> npm test\n\n<span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span> .serverless<span class=\"token punctuation\">:</span>build<span class=\"token punctuation\">:</span>image  \n\n<span class=\"token key atrule\">deploy_staging</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span> .serverless<span class=\"token punctuation\">:</span>deploy<span class=\"token punctuation\">:</span>image\n\n<span class=\"token key atrule\">deploy_prod</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">extends</span><span class=\"token punctuation\">:</span> .serverless<span class=\"token punctuation\">:</span>deploy<span class=\"token punctuation\">:</span>image\n  <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">when</span><span class=\"token punctuation\">:</span> manual\n  <span class=\"token key atrule\">only</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> master</code></pre></div>\n<p>Dockerfile</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre class=\"language-dockerfile\"><code class=\"language-dockerfile\"><span class=\"token comment\"># This file is a template, and might need editing before it works on your project.</span>\n<span class=\"token instruction\"><span class=\"token keyword\">FROM</span> node</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">WORKDIR</span> /usr/src/app</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">ARG</span> NODE_ENV</span>\n<span class=\"token instruction\"><span class=\"token keyword\">ENV</span> NODE_ENV <span class=\"token variable\">$NODE_ENV</span></span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> package.json /usr/src/app/</span>\n<span class=\"token instruction\"><span class=\"token keyword\">RUN</span> npm install</span>\n\n<span class=\"token instruction\"><span class=\"token keyword\">COPY</span> . /usr/src/app</span>\n\n<span class=\"token comment\"># replace this with your application's default port</span>\n<span class=\"token instruction\"><span class=\"token keyword\">EXPOSE</span> 8080</span>\n<span class=\"token instruction\"><span class=\"token keyword\">CMD</span> [ <span class=\"token string\">\"npm\"</span>, <span class=\"token string\">\"start\"</span> ]</span></code></pre></div>\n<p>index.js</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello Gitlab!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8080</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port 8080!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>package.json</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"CI-CD-Tutorial\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"main\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"index.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"license\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"MIT\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"node index.js\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"dependencies\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"express\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"^4.17.1\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre></div>\n<p><img src=\"https://images.velog.io/post-images/wickedev/182c8b40-c670-11e9-be75-25da91e46b44/image.png\" alt=\"image.png\"></p>\n<p>푸시를 한 후 <code class=\"language-text\">CI/CD > Pipelines</code>에 가면 해당 커밋에 대한 파이프라인이 도는 것을 보실 수 있습니다. 일부러 수동 배포도 넣어봤는데 궁금하시면 deploy_prod 옆에 화살표를 눌러보시면 배포가 되는 것을 보실 수 있습니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/daa9aae0-c670-11e9-90c7-471fa107ee07/image.png\" alt=\"image.png\"></p>\n<p>여기서 배포된 express 앱은 <code class=\"language-text\">Operations > Serverless</code> 에 들어가면 보여집니다.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/ff3fbf50-c672-11e9-aacc-27fa98fd5b32/image.png\" alt=\"image.png\"></p>\n<p>접속해보니 잘 나오는군요.</p>\n<p><img src=\"https://images.velog.io/post-images/wickedev/67e38980-c671-11e9-90c7-471fa107ee07/image.png\" alt=\"image.png\"></p>\n<h2>마치며</h2>\n<p>보통 CI 까지는 오픈소스나 개발 환경이 성숙한 회사에서 많이 접할 수 있지만, 사내에 숙련된 DevOps 기술자가 있지 않는 이상 CD까지 하기는 쉽지 않습니다. 하지만 Gitlab 처럼 CI/CD 를 한군데 잘 녹여낸 서비스라면 많은 개발자들이 쉽게 사용할 수 있을 것 같네요. 왜 MS가 Github을 인수했는지 알 것 같은 느낌이 듭니다.</p>\n<p>만약 kubectl을 통한 직접 배포를 원하신다면 깃랩 CI가 <code class=\"language-text\">KUBECONFIG</code> 환경 변수를 넘겨주니 이를 이용하시면 됩니다. 해보시고 안되는 부분은 댓글로 남겨주세요 :)</p>\n<p>지금까지 작성한 코드는 <a href=\"https://gitlab.com/wickedev/ci-cd-tutorial\">gitlab.com/wickedev/ci-cd-tutorial</a> 에 공개되어 있습니다.</p>","title":"깃랩(Gitlab) CI/CD 튜토리얼"}},"staticQueryHashes":["1667661032"]}